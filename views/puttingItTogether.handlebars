<div class="page-header">
	<h1>Putting it Together with Node.js</h1>
</div>
<p>This section will assume that you have some familiarity with Node.js, Express, Express Handlebars, Body Parser, and Request.  The core concepts, however, do not depend on this knowledge.</p>
<p>First, we'll put together a basic Handlebars page template.  Copy and paste the following code into a file, and save it as main.handlebars.</p>
<pre>
<!-- HTML generated using hilite.me --><span style="color: #007020">&lt;!doctype html&gt;</span>
<span style="color: #062873; font-weight: bold">&lt;html&gt;</span>
<span style="color: #062873; font-weight: bold">&lt;head&gt;</span>
<span style="color: #062873; font-weight: bold">&lt;title&gt;</span>My Page<span style="color: #062873; font-weight: bold">&lt;/title&gt;</span>
<span style="color: #062873; font-weight: bold">&lt;/head&gt;</span>
<span style="color: #062873; font-weight: bold">&lt;body&gt;</span>
\{{{body}}}
<span style="color: #062873; font-weight: bold">&lt;/body&gt;</span>
<span style="color: #062873; font-weight: bold">&lt;/html&gt;</span>
</pre>
<p>Next, we'll put together a Handlebars page with a form to get the information we'll need for our request.  The form will need to get the state and district from the user, and then submit it to our server-side javascript, which we'll write next.  Copy and paste the following into a file and save it as congressInfo.handlebars.</p>
<pre>
<!-- HTML generated using hilite.me --><span style="color: #062873; font-weight: bold">&lt;h3&gt;</span>Enter your state and congressional district to get started.<span style="color: #062873; font-weight: bold">&lt;/h3&gt;</span>
<span style="color: #062873; font-weight: bold">&lt;form</span> <span style="color: #4070a0">method=&quot;post&quot;</span><span style="color: #062873; font-weight: bold">&gt;</span>
  <span style="color: #062873; font-weight: bold">&lt;label</span> <span style="color: #4070a0">for=&quot;yourState&quot;</span><span style="color: #062873; font-weight: bold">&gt;</span>Your state (two letter representation):<span style="color: #062873; font-weight: bold">&lt;/label&gt;</span>
  <span style="color: #062873; font-weight: bold">&lt;input</span> <span style="color: #4070a0">type=&quot;text&quot;</span> <span style="color: #4070a0">name=&quot;state&quot;</span> <span style="color: #4070a0">id=&quot;yourState&quot;</span><span style="color: #062873; font-weight: bold">&gt;</span>
  <span style="color: #062873; font-weight: bold">&lt;label</span> <span style="color: #4070a0">for=&quot;yourDistrict&quot;</span><span style="color: #062873; font-weight: bold">&gt;</span>Your congressional district (number):<span style="color: #062873; font-weight: bold">&lt;/label&gt;</span>
  <span style="color: #062873; font-weight: bold">&lt;input</span> <span style="color: #4070a0">type=&quot;text&quot;</span> <span style="color: #4070a0">name=&quot;district&quot;</span> <span style="color: #4070a0">id=&quot;yourDisctrict&quot;</span><span style="color: #062873; font-weight: bold">&gt;</span>
  <span style="color: #062873; font-weight: bold">&lt;input</span> <span style="color: #4070a0">type=&quot;submit&quot;</span> <span style="color: #4070a0">name=&quot;Find My Members&quot;</span> <span style="color: #4070a0">value=&quot;Find My Members&quot;</span><span style="color: #062873; font-weight: bold">&gt;</span>
<span style="color: #062873; font-weight: bold">&lt;/form&gt;</span>
</pre>
<p>Okay, now we have a form that will get information from the user, but we need to write a javascript file that will display the Handlebars page and then receive the information from the form.  Copy and paste the following into a file and save it as congressInfo.js.</p>
<pre>
<!-- HTML generated using hilite.me --><span style="color: #60a0b0; font-style: italic">//these get all of our dependencies set up and configured for our use</span>
<span style="color: #007020; font-weight: bold">var</span> express <span style="color: #666666">=</span> require(<span style="color: #4070a0">&#39;express&#39;</span>);
<span style="color: #007020; font-weight: bold">var</span> app <span style="color: #666666">=</span> express();
<span style="color: #007020; font-weight: bold">var</span> handlebars <span style="color: #666666">=</span> require(<span style="color: #4070a0">&#39;express-handlebars&#39;</span>).create({defaultLayout<span style="color: #666666">:</span><span style="color: #4070a0">&#39;main&#39;</span>});
<span style="color: #007020; font-weight: bold">var</span> bodyParser <span style="color: #666666">=</span> require(<span style="color: #4070a0">&#39;body-parser&#39;</span>);
<span style="color: #007020; font-weight: bold">var</span> request <span style="color: #666666">=</span> require(<span style="color: #4070a0">&#39;request&#39;</span>);
app.use(bodyParser.urlencoded({ extended<span style="color: #666666">:</span> <span style="color: #007020; font-weight: bold">false</span> }));
app.use(bodyParser.json());
app.engine(<span style="color: #4070a0">&#39;handlebars&#39;</span>, handlebars.engine);
app.set(<span style="color: #4070a0">&#39;view engine&#39;</span>, <span style="color: #4070a0">&#39;handlebars&#39;</span>);
app.set(<span style="color: #4070a0">&#39;port&#39;</span>, <span style="color: #40a070">3000</span>);

<span style="color: #60a0b0; font-style: italic">//we&#39;ll add the request and data extraction in this function</span>
<span style="color: #007020; font-weight: bold">function</span> getMembersByState(context, callback){
	callback(context);
}

<span style="color: #60a0b0; font-style: italic">//this displays the page when the user navigates there or refreshes the page</span>
app.get(<span style="color: #4070a0">&#39;/&#39;</span>, <span style="color: #007020; font-weight: bold">function</span>(req,res,next){
	<span style="color: #007020; font-weight: bold">var</span> context <span style="color: #666666">=</span> {};
	res.render(<span style="color: #4070a0">&#39;congressInfo&#39;</span>, context);
});

<span style="color: #60a0b0; font-style: italic">//this receives the data from the page and then re-renders it</span>
app.post(<span style="color: #4070a0">&#39;/&#39;</span>, <span style="color: #007020; font-weight: bold">function</span>(req,res){
	<span style="color: #007020; font-weight: bold">var</span> context <span style="color: #666666">=</span> {};
	context.state <span style="color: #666666">=</span> req.body.state;
	context.district <span style="color: #666666">=</span> req.body.district;
	getMembersByState(context, <span style="color: #007020; font-weight: bold">function</span>(context){
		res.render(<span style="color: #4070a0">&#39;congressInfo&#39;</span>, context);
	});
});

<span style="color: #60a0b0; font-style: italic">//some error handling</span>
app.use(<span style="color: #007020; font-weight: bold">function</span>(req,res){
	res.status(<span style="color: #40a070">404</span>);
	res.render(<span style="color: #4070a0">&#39;404&#39;</span>);
});

<span style="color: #60a0b0; font-style: italic">//more error handling</span>
app.use(<span style="color: #007020; font-weight: bold">function</span>(err,req,res,next){
	console.error(err.stack);
	res.status(<span style="color: #40a070">500</span>);
	res.render(<span style="color: #4070a0">&#39;500&#39;</span>);
});

<span style="color: #60a0b0; font-style: italic">//this will allow the application to run on Node</span>
app.listen(app.get(<span style="color: #4070a0">&#39;port&#39;</span>), <span style="color: #007020; font-weight: bold">function</span>(){
	console.log(<span style="color: #4070a0">&#39;Express started on http:localhost:&#39;</span> <span style="color: #666666">+</span> app.get(<span style="color: #4070a0">&#39;port&#39;</span>) <span style="color: #666666">+</span> <span style="color: #4070a0">&#39;; press Ctrl-C to terminate.&#39;</span>);
});
</pre>
<p>Most of the code here is pretty standard.  The part that we want to note right now is the app.post route.  It will be run when the user submits the form.  The route creates a context variable in which to store the user-generated data, and then extracts that data from the body of the request into context.  Finally, it calls the function getMembersByState(), which right now is just a stub, but which will request data from The Congress API and return that data back to this route.  For now though, we're just storing the user data and then re-rendering the page.
	</p>
<p>At this point, we have the bare bones of a working application.  We just need to arrange our files and then we can run our program.  In the directory where your javascript file is saved, create a new folder named "views".  Next, move the congressInfo.handlebars file into this folder, and create another new folder, named "layouts" within the "views" folder.  Finally, move the main.handlebars file into the newly created "layouts" folder.  We are now ready to run the program!  Just go to wherever you have Node.js installed and run your program with <code>node congressInfo.js</code>. (If you don't have Node.js and the previously mentioned dependencies installed, you'll need to install them before you can run the program.  You can find Node.js <a href="https://nodejs.org/en/">here</a>, Express <a href="http://expressjs.com/">here</a>, Express-Handlebars <a href="https://github.com/ericf/express-handlebars">here</a>, Body-Parser <a href="https://github.com/expressjs/body-parser">here</a>, and Request <a href="https://www.npmjs.com/package/request">here</a>.)
</p>
<p>While the program is running, navigate to the host address in your browser to view the page.  (If you're running Node.js locally, this will be <code>localhost:3000</code>.)  It should look like this:
</p>
<img src="/images/congressHowToForm.png" class="img-responsive" alt="Congress Form">
<p>Now that we have the basics in place, let's add some code to make a request and view the data from the request.  We need to expand the getMembersByState() function (that is thus far just a stub) to make the request and extract the data we receive.  Since we've already gone over how to use the "Current Members by Sate/District" endpoint to get the members from one chamber, we're going to make two requests in the getMembersByState() function so that we can return all of the user's representatives in Congress at once.  In your congressInfo.js file, you'll need to replace the function stub for getMembersByState() with the following:
	</p>


<pre>
<!-- HTML generated using hilite.me --><span style="color: #007020; font-weight: bold">function</span> getMembersByState(context, callback){
	<span style="color: #007020; font-weight: bold">var</span> responseCount <span style="color: #666666">=</span> <span style="color: #40a070">2</span>;
	<span style="color: #007020; font-weight: bold">var</span> yourAPIKey <span style="color: #666666">=</span> <span style="color: #4070a0">&#39;&#39;</span>;	<span style="color: #60a0b0; font-style: italic">//enter your API key here</span>
	<span style="color: #007020; font-weight: bold">var</span> requestURIHouse <span style="color: #666666">=</span> <span style="color: #4070a0">&#39;http://api.nytimes.com/svc/politics/v3/us/legislative/congress/members/house/&#39;</span>;
	requestURIHouse <span style="color: #666666">+=</span> context.state <span style="color: #666666">+</span> <span style="color: #4070a0">&#39;/&#39;</span> <span style="color: #666666">+</span> context.district <span style="color: #666666">+</span> <span style="color: #4070a0">&#39;/current.json?api-key=&#39;</span> <span style="color: #666666">+</span> yourAPIKey;
	request(requestURIHouse, <span style="color: #007020; font-weight: bold">function</span>(err, response, body){
		<span style="color: #007020; font-weight: bold">if</span>(<span style="color: #666666">!</span>err <span style="color: #666666">&amp;&amp;</span> response.statusCode <span style="color: #666666">&lt;</span> <span style="color: #40a070">400</span>){
			<span style="color: #007020; font-weight: bold">var</span> responseData <span style="color: #666666">=</span> JSON.parse(body);
			context.houseRepName <span style="color: #666666">=</span> responseData.results[<span style="color: #40a070">0</span>].name;
			context.houseRepParty <span style="color: #666666">=</span> responseData.results[<span style="color: #40a070">0</span>].party;
			context.houseRepId <span style="color: #666666">=</span> responseData.results[<span style="color: #40a070">0</span>].id;
		} <span style="color: #007020; font-weight: bold">else</span> {
			console.log(err);
			<span style="color: #007020; font-weight: bold">if</span> (response){
				console.log(response.statusCode);
			}
		}
		responseCount<span style="color: #666666">--</span>;
		<span style="color: #007020; font-weight: bold">if</span> (responseCount <span style="color: #666666">==</span> <span style="color: #40a070">0</span>){
			callback(context);
		}
	});
	<span style="color: #007020; font-weight: bold">var</span> requestURISenate <span style="color: #666666">=</span> <span style="color: #4070a0">&#39;http://api.nytimes.com/svc/politics/v3/us/legislative/congress/members/senate/&#39;</span>;
	requestURISenate <span style="color: #666666">+=</span> context.state <span style="color: #666666">+</span> <span style="color: #4070a0">&#39;/current.json?api-key=&#39;</span> <span style="color: #666666">+</span> yourAPIKey;
	request(requestURISenate, <span style="color: #007020; font-weight: bold">function</span>(err, response, body){
		<span style="color: #007020; font-weight: bold">if</span>(<span style="color: #666666">!</span>err <span style="color: #666666">&amp;&amp;</span> response.statusCode <span style="color: #666666">&lt;</span> <span style="color: #40a070">400</span>){
			<span style="color: #007020; font-weight: bold">var</span> responseData <span style="color: #666666">=</span> JSON.parse(body);
			context.senateRep1Name <span style="color: #666666">=</span> responseData.results[<span style="color: #40a070">0</span>].name;
			context.senateRep1Party <span style="color: #666666">=</span> responseData.results[<span style="color: #40a070">0</span>].party;
			context.senateRep1Id <span style="color: #666666">=</span> responseData.results[<span style="color: #40a070">0</span>].id;
			context.senateRep2Name <span style="color: #666666">=</span> responseData.results[<span style="color: #40a070">1</span>].name;
			context.senateRep2Party <span style="color: #666666">=</span> responseData.results[<span style="color: #40a070">1</span>].party;
			context.senateRep2Id <span style="color: #666666">=</span> responseData.results[<span style="color: #40a070">1</span>].id;
		} <span style="color: #007020; font-weight: bold">else</span> {
			console.log(err);
			<span style="color: #007020; font-weight: bold">if</span> (response){
				console.log(response.statusCode);
			}
		}
		responseCount<span style="color: #666666">--</span>;
		<span style="color: #007020; font-weight: bold">if</span> (responseCount <span style="color: #666666">==</span> <span style="color: #40a070">0</span>){
			callback(context);
		}
	});
}
</pre>
<p>This might look like a pretty big leap from what we had before, but it's not actually that complicated.  We're using a variable named responseCount to track when the requests return (as they are asynchronous, and we need to know that both have returned before we go ahead and re-render the page).  The next three lines build up the request URI using the data we received from the form, which is much the same as what we did manually to make our first request, this time making a request for the House member that represents the given state and district.  Next, the request is sent, and we move into its callback function.  It checks that the response came through okay (without errors) and then parses the data.  I've chosen a few fields to extract from the response and store in our context object, which we'll use to render the data onto our page.  If the response does include an error, the data parsing is skipped, and the error and status code are logged to the console for debugging.  Once the callback has extracted the data (assuming no errors), it decrements the responseCount variable and checks to see if the other request has completed before it or not.  If it is the last request to complete (when responseCount equals zero), then it calls the passed-in callback function, which returns control to the route that called it.  The second half of the function is more or less the same as the first, except that it requests Senate members rather than the House member. Finally, that callback renders the page with the newly-updated context object.
</p>
<p>Alright!  Now we have data from our API ready in our context object, but we're not doing anything with it.  So, now we need to add to our congressInfo.handlebars file so the user can see the wonderful data we've retrieved for them.  Add the following to your congressInfo.handlebars file (after the closing form tag).
	</p>
<pre>
<!-- HTML generated using hilite.me -->\{{#if state}}
<span style="color: #062873; font-weight: bold">&lt;h4&gt;</span>Your representatives:<span style="color: #062873; font-weight: bold">&lt;/h4&gt;</span>
<span style="color: #062873; font-weight: bold">&lt;h5&gt;</span>State:\{{state}}   District:\{{district}}<span style="color: #062873; font-weight: bold">&lt;/h5&gt;</span>
<span style="color: #062873; font-weight: bold">&lt;ul&gt;</span>
  <span style="color: #062873; font-weight: bold">&lt;li&gt;</span>Senate:
    <span style="color: #062873; font-weight: bold">&lt;ul&gt;</span>
      <span style="color: #062873; font-weight: bold">&lt;li&gt;</span>\{{senateRep1Name}}
        <span style="color: #062873; font-weight: bold">&lt;ul&gt;</span>
          <span style="color: #062873; font-weight: bold">&lt;li&gt;</span>Party: \{{senateRep1Party}}<span style="color: #062873; font-weight: bold">&lt;/li&gt;</span>
          <span style="color: #062873; font-weight: bold">&lt;li&gt;</span>ID: \{{senateRep1Id}}<span style="color: #062873; font-weight: bold">&lt;/li&gt;</span>
        <span style="color: #062873; font-weight: bold">&lt;/ul&gt;</span>
      <span style="color: #062873; font-weight: bold">&lt;/li&gt;</span>
      <span style="color: #062873; font-weight: bold">&lt;li&gt;</span>\{{senateRep2Name}}
        <span style="color: #062873; font-weight: bold">&lt;ul&gt;</span>
          <span style="color: #062873; font-weight: bold">&lt;li&gt;</span>Party: \{{senateRep2Party}}<span style="color: #062873; font-weight: bold">&lt;/li&gt;</span>
          <span style="color: #062873; font-weight: bold">&lt;li&gt;</span>ID: \{{senateRep2Id}}<span style="color: #062873; font-weight: bold">&lt;/li&gt;</span>
        <span style="color: #062873; font-weight: bold">&lt;/ul&gt;</span>
      <span style="color: #062873; font-weight: bold">&lt;/li&gt;</span>
    <span style="color: #062873; font-weight: bold">&lt;/ul&gt;</span>
  <span style="color: #062873; font-weight: bold">&lt;/li&gt;</span>
  <span style="color: #062873; font-weight: bold">&lt;li&gt;</span>House:
    <span style="color: #062873; font-weight: bold">&lt;ul&gt;</span>
      <span style="color: #062873; font-weight: bold">&lt;li&gt;</span>\{{houseRepName}}
        <span style="color: #062873; font-weight: bold">&lt;ul&gt;</span>
          <span style="color: #062873; font-weight: bold">&lt;li&gt;</span>Party: \{{houseRepParty}}<span style="color: #062873; font-weight: bold">&lt;/li&gt;</span>
          <span style="color: #062873; font-weight: bold">&lt;li&gt;</span>ID: \{{houseRepId}}<span style="color: #062873; font-weight: bold">&lt;/li&gt;</span>
        <span style="color: #062873; font-weight: bold">&lt;/ul&gt;</span>
      <span style="color: #062873; font-weight: bold">&lt;/li&gt;</span>
    <span style="color: #062873; font-weight: bold">&lt;/ul&gt;</span>
  <span style="color: #062873; font-weight: bold">&lt;/li&gt;</span>
<span style="color: #062873; font-weight: bold">&lt;/ul&gt;</span>
\{{/if}}
</pre>
<p>This Handlebars file will now grab the data from the context object and display it in the corresponding \{{field}}.  We're now ready to run our program again!  Go back to where you have node installed and run the javascript file with <code>node congressInfo.js</code>.  Again, navigate to the host address in your browser to view the page.  Enter some data in the form fields, click submit, and see what happens!  With any luck, you should now see something like this:
	</p>
<img src="/images/congressHowToFormResponse.png" class="img-responsive" alt="Form Now with Data">
